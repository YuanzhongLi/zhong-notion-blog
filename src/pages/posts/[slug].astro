---
import * as interfaces from '../../lib/interfaces';
import {
  getAllPosts,
  getPostBySlug,
  getTagNamesByPost,
  getPostsByTags,
  retrieveRelatedPostsWithoutCurrentPost,
  getBlock,
  getAllBlocksByBlockId,
  downloadFile,
} from '../../lib/notion/client';
import {
  getPostLink,
  filePath,
  extractTargetBlocks,
} from '../../lib/blog-helpers';
import Layout from '../../layouts/Layout.astro';
import PostBody from '../../components/PostBody.astro';
import SideTableOfContents from '../../components/Article/TableOfContents/SideTableOfContents.astro';
import MainTableOfContents from '../../components/Article/TableOfContents/MainTableOfContents.astro';
import RelatedBlogSections from '../../components/BlogSections/RelatedBlogSections.astro';
import ArticleCover from '../../components/Article/Cover/Cover.astro';

export async function getStaticPaths() {
  const posts = await getAllPosts();
  return posts.map((post: interfaces.Post) => ({ params: { slug: post.Slug } }));
}

const { slug } = Astro.params;

const post = await getPostBySlug(slug);

if (!post) {
  throw new Error(`Post not found. slug: ${slug}`);
}

const [
  blocks,
  postsHavingSameTag,
] = await Promise.all([
  getAllBlocksByBlockId(post.PageId),
  getPostsByTags(getTagNamesByPost(post), 6),
]);

const fileAtacchedBlocks = extractTargetBlocks('image', blocks)
  .concat(extractTargetBlocks('file', blocks))
  .filter((block) => {
    if (!block) {
      return false;
    }
    const imageOrFile = block.Image || block.File;
    return imageOrFile && imageOrFile.File && imageOrFile.File.Url;
  });

// Download files
await Promise.all(
  fileAtacchedBlocks
    .map(async (block: interfaces.Block) => {
      let expiryTime = '';
      if (block.Image) {
        expiryTime = block.Image.File?.ExpiryTime as string;
      } else if (block.File) {
        expiryTime = block.File.File?.ExpiryTime as string;
      }
      if (Date.parse(expiryTime) > Date.now()) {
        return Promise.resolve(block);
      }
      return getBlock(block.Id);
    })
    .map((promise) => promise.then((block) => {
      let url!: URL;
      try {
        if (block.Image) {
          url = new URL(block.Image.File?.Url as string);
        } else if (block.File) {
          url = new URL(block.File.File?.Url as string);
        } else {
          throw new Error('Invalid file URL');
        }
      } catch (err) {
        console.log('Invalid file URL');
        return Promise.reject();
      }
      return Promise.resolve(url);
    }))
    .map((promise) => promise.then(downloadFile)),
);

let ogImage: string = '';
if (post.FeaturedImage && post.FeaturedImage.Url) {
  const ogImageURL = new URL(filePath(new URL(post.FeaturedImage.Url)), Astro.site);
  ogImage = ogImageURL.toString();
}

const headings = blocks.filter((b: interfaces.Block) => ['heading_1', 'heading_2', 'heading_3'].includes(b.Type));
const title = post.Title;
const icon = post.Icon;
const date = post.Date;
const tags = post.Tags;
---

<Layout
  title={post.Title}
  description={post.Excerpt}
  path={getPostLink(post.Slug)}
  ogImage={ogImage}
>
  <div slot="main">
    <div
      class="article-with-toc"
    >
      <div class="main-article">
        <ArticleCover title={title} icon={icon} date={date} tags={tags}/>
        <MainTableOfContents headings={headings} />
        <PostBody blocks={blocks} />
      </div>

      <div
        class="side-toc"
      >
        <SideTableOfContents headings={headings} />
      </div>
    </div>
    <div class="text-center">
      <h1 class="md:w-[80vw] lg:w-[70vw] md:mx-auto pt-10 text-3xl sm:text-4xl font-bold text-gray-800 dark:text-gray-200">
        関連記事
      </h1>
    </div>
    <RelatedBlogSections posts={retrieveRelatedPostsWithoutCurrentPost(postsHavingSameTag, post)} />
  </div>
</Layout>

<style>
.article-with-toc {
  display: flex;
  flex-direction: row;
  width: 90vw;
  margin-inline: auto;
}

.main-article {
  width: 100%;
}

.side-toc {
  display: none;
}

@media (min-width: 768px) {
  .article-with-toc {
    width: 80vw;
  }
}

@media (min-width: 1024px) {
  .article-with-toc {
    width: 70vw;
  }
}

@media (min-width: 1280px) {
  .article-with-toc {
    width: 85vw;
    margin-left: 15vw;
  }

  .main-article {
    width: var(--article-max-width);
  }

  .side-toc {
    display: flex;
    position: sticky;
    top: 148px;
    flex-direction: column;
    align-self: flex-start;
    align-items: center;
    width: calc(85vw - var(--article-max-width));
  }
}
</style>

<script>
document.addEventListener("scroll", function() {
  const wrapper = document.querySelector(".article-with-toc") as Element;

  // contents lenght should be same as tocLinks length
  const contents = document
    .querySelectorAll("a.adjust-sticky-header-toggle, a.adjust-sticky-header");
  const tocLinks = document.querySelectorAll("a.toc-link");

  const contentPositions: any[] = [];
  contents.forEach((content, i) => {
    const startPosition =
      content.getBoundingClientRect().top;
    const endPosition = contents.item(i + 1)
      ? contents.item(i + 1).getBoundingClientRect().top
      : wrapper.scrollHeight;
    contentPositions.push({ startPosition, endPosition });
  });

  tocLinks.forEach((tocLink, i) => {
    const { startPosition, endPosition } = contentPositions[i];
    if (
      startPosition <= 0 &&
      endPosition > 0
    ) {
      tocLink.classList.add('active');
    } else {
      tocLink.classList.remove('active');
    }
  });
});
</script>
